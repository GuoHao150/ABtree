var searchIndex = JSON.parse('{\
"ABtree":{"doc":"This crate named as ABtree but this not means this is a …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AVL","BTree","add","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","contains","contains","drop","drop","from","from","from_iter","from_iter","get","get","insert","insert","into","into","into_iter","into_iter","is_balanced_tree","is_empty","is_empty","iter","iter","len","len","new","new","peek_root","pop_max","pop_min","remove","remove","set","set","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["ABtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An AVL balanced tree with owned nodes.","A b-tree with owned nodes and what makes it different …","Adding key-value pair into the tree","","","","","Removes all elements from the AVL tree","Clearing the tree","","","","","Containment check","Check if Btree contains some key","","","","","","","Get the value by key","Give a reference of key try to return the reference","Adding key-value pair into the tree this method is an …","Adding a pair of key and value into the tree","","","","","To check if shis tree is balanced","To check if shis tree is empty","To tell if this tree is empty","Provides a forward iterator.","Making an iter of Btree","Get the length of this tree","Get the length","Create an empty AVL tree","Create a B-tree with some order. and the order is maximum …","Peeking the root node","Poping out the maximum key-value pair in the tree","Poping out the minimum key-value pair in the tree","Removing key-value pair","Removing by key","Setting a key-value pair if the key exists it will update …","Updating the key with a new value and if the key is not …","","","","","","","",""],"i":[0,0,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2],"f":[null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["iter",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"AVL"],[3,"BTree"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};